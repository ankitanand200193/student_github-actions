name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging
  release:
    types: [created]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      MONGO_URI: ${{ secrets.MONGO_URI }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests
        run: |
          pip install pytest
          pytest

      - name: Setup SSH Key
        run: |
          echo "${{ secrets.AWS_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Deploy to EC2
        if: github.ref == 'refs/heads/staging' || github.event_name == 'release'
        env:
          HOST: ${{ github.ref == 'refs/heads/staging' && secrets.STAGING_HOST || secrets.PROD_HOST }}
          BRANCH: ${{ github.ref == 'refs/heads/staging' && 'staging' || 'main' }}
        run: |
          set -e
          if [ -z "$HOST" ]; then
            echo "Error: HOST is not set"
            exit 1
          fi

          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_USER }}@$HOST <<EOF
            set -e
            # Create app directory if it doesn't exist
            mkdir -p app
            cd app || { echo "Failed to cd into app directory"; exit 1; }
            
            # Initialize git repo if not already initialized
            if [ ! -d .git ]; then
              git init
              git remote add origin https://github.com/ankitanand200193/student_github-actions.git
            fi
            
            git fetch --all
            git checkout $BRANCH || git checkout -b $BRANCH
            git pull origin $BRANCH
            
            echo "MONGO_URI=${{ secrets.MONGO_URI }}" > .env
            python3 -m venv venv || echo "Virtual environment already exists"
            source venv/bin/activate || { echo "Failed to activate venv"; exit 1; }
            pip install -r requirements.txt
            sudo systemctl restart flaskapp || { echo "Failed to restart flaskapp"; exit 1; }
          EOF
